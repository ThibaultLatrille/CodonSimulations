import os
EXPERIMENT = os.path.abspath('.')
ROOT = os.path.abspath('../..')
import numpy as np
import sys
sys.path.append(ROOT)
from scripts.snakemake_module import *

configfile: open_config(EXPERIMENT, 'config.yaml')

# Parameters for the simulation
MODELS = config['EXPERIMENT']['SIMULATORS']
SIMU_PARAM = {k: '' for k in MODELS + ['SIMULATION']}
SIMU_PARAM['SIMULATION'] += ' --newick ' + copy_params(EXPERIMENT, ROOT, config['SIMULATION']['TREE'])
SIMU_PARAM['SIMULATION'] += ' --precision_matrix ' + copy_params(EXPERIMENT, ROOT, config['SIMULATION']['PRECISION_MATRIX'])

for simulator in SIMU_PARAM.keys():
    for param, value in config[simulator].items():
        if type(value) == bool:
            if value:
                SIMU_PARAM[simulator] += ' --{0}'.format(param.lower())
        else:
            try:
                float(value)
                SIMU_PARAM[simulator] += ' --{0} {1}'.format(param.lower(), value)
            except:
                pass

os.makedirs(EXPERIMENT + '/exec', exist_ok=True)

mut_bias_array = ['{0:3f}'.format(i) for i in np.logspace(-1, 1, config['EXPERIMENT']['REPLICATES'])]

diff_git_dir('{0}/SimuEvol'.format(ROOT), '{0}/SimuEvol'.format(EXPERIMENT))

rule all:
    input:
        expand(EXPERIMENT + '/exp_{model}_{mut_bias}_exp.fasta', mut_bias=mut_bias_array, model=MODELS),
        expand(EXPERIMENT + '/exp_{model}_{mut_bias}_exp.dnds.tsv', mut_bias=mut_bias_array, model=MODELS)


rule cp_simuevol:
    output: EXPERIMENT + '/exec/{model}',
    input: dir=EXPERIMENT + '/SimuEvol.version'
    params: lambda w: w.model
    shell: 'cd {ROOT}/SimuEvol && cp build/{params} {EXPERIMENT}/exec/{params}'

rule generate_matrix:
    output: EXPERIMENT + '/{mut_bias}_matrix.tsv'
    input:
         exec=ROOT + '/scripts/generate_matrix.py'
    params:
          mut_bias=lambda w: '--lambda {0}'.format(w.mut_bias)
    shell: 'python3 {input.exec} {params.mut_bias} --output {output}'

rule run_simulation:
    output: touch(EXPERIMENT + '/exp_{model}_{mut_bias}_exp')
    input:
         exec=rules.cp_simuevol.output,
         matrix=rules.generate_matrix.output
    params:
         simulator=lambda w: SIMU_PARAM[w.model] + SIMU_PARAM['SIMULATION']
    shell: '{input.exec} {params.simulator} --nuc_matrix {input.matrix} --output {output}'

rule ali_to_fasta:
    output: EXPERIMENT + '/exp_{model}_{mut_bias}_exp.fasta'
    input:
         src=ROOT + '/scripts/ali_2_fasta.py',
         exp=rules.run_simulation.output
    shell: 'python3 {input.src} --input {input.exp} --output {output}'

rule nhx_to_tsv:
    output: EXPERIMENT + '/exp_{model}_{mut_bias}_exp.dnds.tsv'
    input:
         src=ROOT + '/scripts/nhx_to_tsv.py',
         exp=rules.run_simulation.output
    shell: 'python3 {input.src} --input {input.exp} --output {output}'
